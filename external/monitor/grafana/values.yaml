grafanaBackup:
  schedule: 0 4 * * *
  enabled: true
  image:
    repository: dealfa/grafana-backup-tool
    tag: v1.4.4
mysql:
  global:
    storageClass: nfs-client
  auth:
    database: grafana
    existingSecret: grafana-db-secret
    username: grafanauser
grafana:
  plugins:
    - grafana-piechart-panel
  grafana.ini:
    azure:
      managed_identity_enabled: true
    database:
      host: grafana-mysql-headless
      type: mysql
      user: grafanauser
      name: grafana
    server:
      domain: grafana.mattgerega.net
      root_url: https://grafana.mattgerega.net
    auth.azuread:
      allow_sign_up: true
      scopes: openid email profile
      token_url: https://login.microsoftonline.com/70965cdd-c60c-4109-9fcf-709b2f23bd0c/oauth2/v2.0/token
      name: Azure AD
      role_attribute_strict: false
      auth_url: https://login.microsoftonline.com/70965cdd-c60c-4109-9fcf-709b2f23bd0c/oauth2/v2.0/authorize
      enabled: true
  ingress:
    path: /
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/service-upstream: "true"
    pathType: Prefix
    hosts:
      - grafana.mattgerega.net
    tls: []
    enabled: true
  revisionHistoryLimit: 1
  service:
    annotations:
      linkerd.io/inject: enabled
  podAnnotations:
    linkerd.io/inject: enabled
  persistence:
    storageClassName: nfs-client
    enabled: true
  serviceMonitor:
    enabled: true
  envFromSecret: grafana-auth-secret
  admin:
    userKey: GRAFANA_ADMIN_USER
    passwordKey: GRAFANA_ADMIN_PASSWORD
    existingSecret: grafana-admin-secret

controllers:
  main:
    enabled: false
  postgres:
    containers:
      main:
        image:
          repository: postgres
          pullPolicy: IfNotPresent
          tag: 17
        envFrom:
        - secretRef:
            name: postgres-secrets
        env:
        - value: 5432
          name: POSTGRES_PORT
        - value: postgres-service
          name: POSTGRES_HOST
        - value: techradar
          name: POSTGRES_DB
        strategy:
          type: Recreate
    strategy: Recreate
    type: deployment
    replicas: 1
    enabled: true
    revisionHistoryLimit: 3
service:
  main:
    enabled: false
  postgres:
    type: ClusterIP
    primary: false
    ports:
      postgres:
        enabled: true
        port: 5432
    controller: postgres
configMaps:
  postgres-init-data:
    data:
      init-data.sh: |
        #!/bin/bash
        set -e;
        if [ -n "${POSTGRES_NON_ROOT_USER:-}" ] && [ -n "${POSTGRES_NON_ROOT_PASSWORD:-}" ]; then
          psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
            CREATE USER "${POSTGRES_NON_ROOT_USER}" WITH PASSWORD '${POSTGRES_NON_ROOT_PASSWORD}';
            GRANT ALL PRIVILEGES ON DATABASE ${POSTGRES_DB} TO "${POSTGRES_NON_ROOT_USER}";
            ALTER DATABASE ${POSTGRES_DB} OWNER TO "${POSTGRES_NON_ROOT_USER}";
        EOSQL
        else
          echo "SETUP INFO: No Environment variables given!"
        fi
    enabled: true
persistence:
  postgres-init-data:
    type: configMap
    advancedMounts:
      postgres:
        main:
        - subPath: init-data.sh
          path: /docker-entrypoint-initdb.d/init-techradar-user.sh
    enabled: true
    identifier: postgres-init-data
  postgres-data:
    advancedMounts:
      postgres:
        main:
        - path: /var/lib/postgresql/data
    storageClass: nfs-client
    accessMode: ReadWriteMany
    type: persistentVolumeClaim
    size: 300Gi
    enabled: true
  postgres-secrets:
    type: secret
    name: postgres-secrets
    enabled: true