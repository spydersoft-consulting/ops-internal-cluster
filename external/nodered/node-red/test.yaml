---
# Source: node-red/templates/common.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: node-red-data
  labels:
    app.kubernetes.io/instance: node-red
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: node-red
    app.kubernetes.io/version: 2.2.3
    helm.sh/chart: node-red-2.2.3
  annotations:
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "2GB"
  storageClassName: "nfs-client"
---
# Source: node-red/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: node-red
  labels:
    app.kubernetes.io/service: node-red
    app.kubernetes.io/instance: node-red
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: node-red
    app.kubernetes.io/version: 2.2.3
    helm.sh/chart: node-red-2.2.3
  annotations:
spec:
  type: ClusterIP
  ports:
  - port: 1880
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/instance: node-red
    app.kubernetes.io/name: node-red
---
# Source: node-red/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-red
  labels:
    app.kubernetes.io/instance: node-red
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: node-red
    app.kubernetes.io/version: 2.2.3
    helm.sh/chart: node-red-2.2.3
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: node-red
      app.kubernetes.io/instance: node-red
  template:
    metadata:
      labels:
        app.kubernetes.io/name: node-red
        app.kubernetes.io/instance: node-red
    spec:
      
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: node-red
          image: "nodered/node-red:2.2.3"
          imagePullPolicy: IfNotPresent
          env:
            - name: FLOWS
              value: flows.json
            - name: NODE_OPTIONS
              value: null
            - name: NODE_RED_ENABLE_PROJECTS
              value: null
            - name: NODE_RED_ENABLE_SAFE_MODE
              value: null
            - name: TZ
              value: UTC
          ports:
            - name: http
              containerPort: 1880
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /data
          livenessProbe:
            tcpSocket:
              port: 1880
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 1880
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 1880
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: node-red-data
---
# Source: node-red/templates/common.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: node-red
  labels:
    app.kubernetes.io/instance: node-red
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: node-red
    app.kubernetes.io/version: 2.2.3
    helm.sh/chart: node-red-2.2.3
    ingressClassName: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 500M
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: "nodered.mattgerega.net"
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: node-red
                port:
                  number: 1880
---
# Source: node-red/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "node-red-test-connection"
  labels:
    helm.sh/chart: node-red-2.2.3
    app.kubernetes.io/name: node-red
    app.kubernetes.io/instance: node-red
    app.kubernetes.io/version: "2.2.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['node-red:']
  restartPolicy: Never
